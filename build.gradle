buildscript {
	repositories {
		mavenCentral()
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
}

plugins {
	id "com.bmuschko.docker-remote-api" version "4.0.5"
}

repositories {
	jcenter()
	mavenCentral()
}

apply plugin: "java"
apply plugin: "maven"
apply plugin: "scala"
apply plugin: "signing"

description = "Mongoose is a high-load storage performance testing tool"
group = "com.github.emc-mongoose"
sourceCompatibility = 11
targetCompatibility = 11
version = "4.2.3"

ext {
	depVersion = [
		base                : "4.2.3",
		loadStepPipeline    : "4.2.3",
		loadStepWeighted    : "4.2.3",
		storageDriverCoop   : "4.2.3",
		storageDriverPreempt: "4.2.3",
		storageDriverNetty  : "4.2.3",
		storageDriverNio    : "4.2.3",
		storageDriverHttp   : "4.2.3",
		storageDriverFs     : "4.2.3",
		storageDriverAtmos  : "4.2.3",
		storageDriverS3     : "4.2.3",
		storageDriverSwift  : "4.2.3",
	]
	jarFileName = rootProject.name
	javaHome = System.properties["java.home"]
	jreOutputDir = "${rootProject.buildDir}${File.separator}jre"
	rootPkg = "com.emc.mongoose"
	modulesDepsFilePath = "${rootProject.buildDir}${File.separator}modules.deps"
}

configurations {
	extension {
		extendsFrom(compileOnly)
	}
}

dependencies {
	compile(
		"${group}:mongoose-base:${depVersion.base}",
	)
	extension(
		"${group}:mongoose-load-step-pipeline:${depVersion.loadStepPipeline}",
		"${group}:mongoose-load-step-weighted:${depVersion.loadStepWeighted}",
		"${group}:mongoose-storage-driver-coop:${depVersion.storageDriverCoop}",
		"${group}:mongoose-storage-driver-preempt:${depVersion.storageDriverPreempt}",
		"${group}:mongoose-storage-driver-netty:${depVersion.storageDriverNetty}",
		"${group}:mongoose-storage-driver-nio:${depVersion.storageDriverNio}",
		"${group}:mongoose-storage-driver-http:${depVersion.storageDriverHttp}",
		"${group}:mongoose-storage-driver-fs:${depVersion.storageDriverFs}",
		"${group}:mongoose-storage-driver-atmos:${depVersion.storageDriverAtmos}",
		"${group}:mongoose-storage-driver-s3:${depVersion.storageDriverS3}",
		"${group}:mongoose-storage-driver-swift:${depVersion.storageDriverSwift}",
	)
}

// travis deploy stage runs "./gradlew check" again which is unnecessary
check.dependsOn -= test

javadoc {
	classpath += configurations.compile
}

signing {
	required {
		gradle.taskGraph.hasTask("uploadArchives")
	}
	sign configurations.archives
}

wrapper {
	gradleVersion = "4.10.3"
}

jar {
	baseName = rootProject.name
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	excludes = [
		"**/*.css",
		"**/*.html",
		"META-INF/*.DSA",
		"META-INF/*.LIST",
		"META-INF/*.RSA",
		"META-INF/*.SF",
		"module-info.class",
	]
	manifest {
		attributes(
			"Automatic-Module-Name": rootPkg,
			"Implementation-Title": rootProject.name,
			"Implementation-Version": version,
			"Main-Class": "${rootPkg}.base.Main",
		)
	}
	from configurations.compile.copyRecursive().collect {
		zipTree(it)
	}
	into("${File.separator}ext") {
		from configurations.extension.copyRecursive().collect {
			it
		}
	}
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = "javadoc"
	from javadoc.destinationDir
}

artifacts {
	archives jar
	archives sourcesJar
	archives javadocJar
}

// see http://central.sonatype.org/pages/gradle.html for details
uploadArchives {

	def ossrhUsername = project.hasProperty("ossrhUsername") ?
		project.property("ossrhUsername") : null
	def ossrhPassword = project.hasProperty("ossrhPassword") ?
		project.property("ossrhPassword") : null

	repositories {
		mavenDeployer {
			beforeDeployment {
				MavenDeployment deployment -> signing.signPom(deployment)
			}

			repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
				authentication(userName: ossrhUsername, password: ossrhPassword)
			}

			snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
				authentication(userName: ossrhUsername, password: ossrhPassword)
			}

			pom {

				groupId = rootProject.group
				name = rootProject.name
				artifactId = name

				project {
					description = rootProject.description

					url "https://github.com/emc-mongoose/mongoose/wiki"

					scm {
						connection "https://github.com/emc-mongoose/mongoose.git"
						developerConnection "https://github.com/emc-mongoose/mongoose.git"
						url "https://github.com/emc-mongoose/mongoose.git"
					}

					licenses {
						license {
							name "The MIT License (MIT)"
							url "https://github.com/emc-mongoose/mongoose/wiki/License"
						}
					}

					developers {
						developer {
							id "akurilov"
							name "Andrey Kurilov"
							email "akurilov123@gmail.com"
						}
					}
				}
			}
		}
	}
}

assemble.dependsOn += jar

// Docker tasks ////////////////////////////////////////////////////////////////////////////////////////////////////////

import com.bmuschko.gradle.docker.tasks.image.*
import com.bmuschko.gradle.docker.tasks.container.*

task dockerBuildImage(type: DockerBuildImage, dependsOn: jar) {
	inputDir = rootProject.projectDir
	dockerFile = project.file("ci${File.separator}docker${File.separator}Dockerfile")
	imageId = "emcmongoose/mongoose"
	tags = [
		"emcmongoose/mongoose:${version}".toString(),
		"emcmongoose/mongoose:testing",
	]
}

task dockerPushProductionImage(type: DockerPushImage, dependsOn: dockerBuildImage) {
	imageName = "emcmongoose/mongoose"
	tag = "emcmongoose/mongoose:${version}".toString()
}

task dockerPushTestingImage(type: DockerPushImage, dependsOn: dockerBuildImage) {
	imageName = "emcmongoose/mongoose"
	tag = "emcmongoose/mongoose:testing".toString()
}

// Robot Framework /////////////////////////////////////////////////////////////////////////////////////////////////////

task dockerBuildImageRobotest(type: DockerBuildImage) {
	inputDir = rootProject.projectDir
	dockerFile = project.file("ci${File.separator}docker${File.separator}Dockerfile.robotest")
	imageId = "emcmongoose/mongoose-robotest"
	tags = [
		"emcmongoose/mongoose-robotest:${version}",
	]
}

task dockerCreateContainerRobotest(type: DockerCreateContainer, dependsOn: [dockerBuildImage, dockerBuildImageRobotest]) {
	attachStderr = true
	attachStdout = true
	autoRemove = true
	binds = [
		"${rootProject.buildDir}": "/root/mongoose/build",
		"/var/run/docker.sock"   : "/var/run/docker.sock",
	]
	envVars = [
		"HOST_WORKING_DIR"      : rootProject.projectDir.absolutePath,
		"MONGOOSE_VERSION"      : version,
		"MONGOOSE_IMAGE_VERSION": version,
		"SERVICE_HOST"          : "localhost",
		"SUITE"                 : System.getenv("SUITE"),
		"TEST"                  : System.getenv("TEST"),
	]
	imageId = dockerBuildImageRobotest.getImageId()
	network = "host"
	tty = true
	doLast {
		println "Created the container for the ${System.env.SUITE}.${System.env.TEST} test"
	}
}

task dockerStartContainerRobotest(type: DockerStartContainer, dependsOn: dockerCreateContainerRobotest) {
	targetContainerId dockerCreateContainerRobotest.getContainerId()
}

task robotest(type: DockerWaitContainer, dependsOn: dockerStartContainerRobotest) {
	targetContainerId dockerCreateContainerRobotest.getContainerId()
	timeout = 600 // 10 min w/o output -> fail on Travis CI
	doLast {
		if (0 != exitCode) {
			throw new GradleException("Some robotests FAILED")
		} else {
			println "Robotests PASSED"
		}
	}
}
