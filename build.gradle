import groovy.json.JsonSlurper
import groovy.json.JsonParserType

import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.StandardOpenOption

plugins {
	id "com.bmuschko.docker-remote-api" version "4.0.5"
}

description = "Mongoose is a high-load storage performance testing tool"

ext {

	depVersion = [
		confuse            : "1.1.4",
		confuseIoJson      : "1.0.4",
		commonsCodec       : "1.11",
		commonsLang        : "2.6",
		disruptor          : "3.4.2",
		fiber4j            : "1.0.7",
		jackson            : "2.9.6",
		javaCommons        : "2.1.14",
		javassist          : "3.23.1-GA",
		jetty              : "9.4.14.v20181114",
		junit              : "[4,)",
		scala              : "2.12.6",
		slf4j              : "1.7.25",
		log4j              : "2.8.2",
		tsdbMetrics        : "0.6.0",
		nagaina            : "3.6.11",
		netty              : "4.1.25.Final",
		nettyConnectionPool: "1.0.9",
		nettyTcNative      : "2.0.12.Final",
	]

	leafProjects = subprojects.findAll {
		!it.path.equals(":load") &&
			!it.path.equals(":load:step") &&
			!it.path.equals(":load:step:type") &&
			!it.path.equals(":storage") &&
			!it.path.equals(":storage:driver")
	}

	log4j2PluginsDatPath = Paths.get(
		"META-INF", "org", "apache", "logging", "log4j", "core", "config", "plugins", "Log4j2Plugins.dat",
	)

	jarFileName = rootProject.name
	javaHome = System.properties["java.home"]
	jreOutDir = "${rootProject.buildDir}${File.separator}jre"
	rootPkg = "com.emc.mongoose"
	optDepsDir = "${rootProject.buildDir}${File.separator}optDeps"
}

configurations {
	moduleOpt
}

allprojects {

	buildscript {
		repositories {
			mavenCentral()
		}
	}

	repositories {
		jcenter()
		mavenCentral()
	}

	apply plugin: "java"
	apply plugin: "maven"
	apply plugin: "scala"
	apply plugin: "signing"

	group = "com.github.emc-mongoose"
	version = defineVersion()

	configurations {
		provided
		testCompile {
			extendsFrom(compileOnly, provided)
		}
	}

	sourceSets {
		main {
			compileClasspath += configurations.provided
		}
	}

	afterEvaluate {
		
		compileJava {
			if(project in leafProjects) {
				sourceCompatibility = JavaVersion.VERSION_11
				targetCompatibility = JavaVersion.VERSION_11
				inputs.property("moduleName", moduleName)
				doFirst {
					options.compilerArgs = [
						"--module-path", classpath.asPath,
					]
					classpath = files()
				}
			}
		}
	
		compileTestJava {
			sourceCompatibility = JavaVersion.VERSION_11
			targetCompatibility = JavaVersion.VERSION_11
		}
	
		test {
			exclude "com/emc/mongoose/endurance/*"
			exclude "com/emc/mongoose/integration/*"
			exclude "com/emc/mongoose/perf/*"
			exclude "com/emc/mongoose/system/*"
			exclude "**/TemplateTest.*"
			exclude "**/*PerfTest.*"
			jvmArgs "-XX:MaxDirectMemorySize=2g"
			jvmArgs "-XX:+HeapDumpOnOutOfMemoryError"
			maxHeapSize "2g"
			testLogging {
				events = [
					"standardOut", "skipped", "started", "failed",
				]
				showExceptions = true
				showStandardStreams = true
			}
		}
	
		task perfTest(type: Test) {
	
			include "com/emc/mongoose/perf/*"
	
			jvmArgs "-XX:MaxDirectMemorySize=2g"
			jvmArgs "-XX:+HeapDumpOnOutOfMemoryError"
			maxHeapSize "2g"
			testLogging {
				events = [
					"standardOut", "skipped", "started", "failed",
				]
				showExceptions = true
				showStandardStreams = true
			}
		}
	
		task integrationTest(type: Test) {
			include "com/emc/mongoose/integration/*"
			exclude "**/RollingAppenderTest*"
			jvmArgs "-XX:MaxDirectMemorySize=2g"
			jvmArgs "-XX:+HeapDumpOnOutOfMemoryError"
			maxHeapSize "2g"
			testLogging {
				events = [
					"standardOut", "skipped", "started", "failed",
				]
				showExceptions = true
				showStandardStreams = true
			}
		}
	
		task systemTest(type: Test) {
	
			include "com/emc/mongoose/system/*"
	
			maxHeapSize "1g"
			testLogging {
				events = [
					"standardOut", "skipped", "started", "failed",
				]
				showExceptions = true
				showStandardStreams = true
			}
		}
	
		task enduranceTest(type: Test) {
			include "com/emc/mongoose/endurance/*"
			maxHeapSize "1g"
			testLogging {
				events = [
					"standardOut", "skipped", "started", "failed",
				]
				showExceptions = true
				showStandardStreams = true
			}
		}
	}

	// travis deploy stage runs "./gradlew check" again which is unnecessary
	check.dependsOn -= test

	javadoc {
		classpath += configurations.provided
	}

	signing {
		required {
			gradle.taskGraph.hasTask("uploadArchives")
		}
		sign configurations.archives
	}

	// see http://central.sonatype.org/pages/gradle.html for details
	uploadArchives {

		// upload base artifact and extensions
		if(project != rootProject && !(project in leafProjects)) {
			return
		}

		LinkedList nameParts = new LinkedList()
		collectName(project, nameParts)

		def ossrhUsername = project.hasProperty("ossrhUsername") ?
			project.property("ossrhUsername") : null
		def ossrhPassword = project.hasProperty("ossrhPassword") ?
			project.property("ossrhPassword") : null

		repositories {
			mavenDeployer {
				beforeDeployment {
					MavenDeployment deployment -> signing.signPom(deployment)
				}

				repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
					authentication(userName: ossrhUsername, password: ossrhPassword)
				}

				snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
					authentication(userName: ossrhUsername, password: ossrhPassword)
				}

				pom {

					groupId = rootProject.group
					name = nameParts.join("-")
					artifactId = name

					project {
						description = rootProject.description

						url "https://github.com/emc-mongoose/mongoose/wiki"

						scm {
							connection "https://github.com/emc-mongoose/mongoose.git"
							developerConnection "https://github.com/emc-mongoose/mongoose.git"
							url "https://github.com/emc-mongoose/mongoose.git"
						}

						licenses {
							license {
								name "The MIT License (MIT)"
								url "https://github.com/emc-mongoose/mongoose/wiki/License"
							}
						}

						developers {
							developer {
								id "akurilov"
								name "Andrey Kurilov"
								email "akurilov123@gmail.com"
							}
						}
					}
				}
			}
		}
	}
}

String defineVersion() {
	def configFilePath = [ rootDir, "src", "main", "resources", "config", "defaults.json", ]
		.join(File.separator);
	def inputFile = new File(configFilePath)
	def json = new JsonSlurper().setType(JsonParserType.LAX).parseText(inputFile.text)
	json.run.version
}

task mongooseVersion {
	group = "versioning"
	description = "Prints Mongoose version."
	doLast { logger.quiet version }
}

dependencies {

	provided(
		"commons-codec:commons-codec:${depVersion.commonsCodec}",
		"commons-lang:commons-lang:${depVersion.commonsLang}",
		"com.fasterxml.jackson.core:jackson-annotations:${depVersion.jackson}",
		"com.fasterxml.jackson.core:jackson-core:${depVersion.jackson}",
		"com.fasterxml.jackson.core:jackson-databind:${depVersion.jackson}",
		"com.github.akurilov:confuse:${depVersion.confuse}",
		"com.github.akurilov:confuse-io-json:${depVersion.confuseIoJson}",
		"com.github.akurilov:fiber4j:${depVersion.fiber4j}",
		"com.github.akurilov:java-commons:${depVersion.javaCommons}",
		"com.lmax:disruptor:${depVersion.disruptor}",
		// https://mvnrepository.com/artifact/io.prometheus/simpleclient
		"io.prometheus:simpleclient:${depVersion.tsdbMetrics}",
		"io.prometheus:simpleclient_servlet:${depVersion.tsdbMetrics}",
		"io.prometheus:simpleclient_hotspot:${depVersion.tsdbMetrics}",
		"org.apache.logging.log4j:log4j-api:${depVersion.log4j}",
		"org.apache.logging.log4j:log4j-core:${depVersion.log4j}",
		"org.eclipse.jetty:jetty-server:${depVersion.jetty}",
		"org.eclipse.jetty:jetty-servlet:${depVersion.jetty}",
		"org.eclipse.jetty:jetty-rewrite:${depVersion.jetty}",
		// actually the deps below are the runtime deps
		"org.apache.logging.log4j:log4j-jul:${depVersion.log4j}",
		"org.apache.logging.log4j:log4j-slf4j-impl:${depVersion.log4j}",
		"org.slf4j:slf4j-api:${depVersion.slf4j}"
	)

	testCompile(
		"com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${depVersion.jackson}",
		"junit:junit:${depVersion.junit}",
		"org.scala-lang:scala-compiler:${depVersion.scala}",
		"org.scala-lang:scala-library:${depVersion.scala}",
		"com.github.docker-java:docker-java:[3,)",
		"org.apache.commons:commons-csv:1.1",
		"com.google.guava:guava:25.1-jre",
		"org.apache.commons:commons-math3:3.6.1",
		"org.mockito:mockito-core:2.23.0",
	)

	moduleOpt(group: "com.fasterxml.jackson.dataformat", name: "jackson-dataformat-xml", version: "${depVersion.jackson}") { transitive = false }
}

void collectName(Project p, LinkedList<String> names) {
	names.addFirst p.name
	if(p.parent != null) {
		collectName(p.parent, names)
	}
}

subprojects {

	task sourcesJar(type: Jar, dependsOn: classes) {
		LinkedList names = new LinkedList()
		collectName(project, names)
		baseName = names.join("-")
		classifier = "sources"
		from sourceSets.main.allSource
	}

	task javadocJar(type: Jar, dependsOn: javadoc) {
		LinkedList names = new LinkedList()
		collectName(project, names)
		baseName = names.join("-")
		classifier = "javadoc"
		from javadoc.destinationDir
	}

	artifacts {
		archives jar
		archives sourcesJar
		archives javadocJar
	}
}

task wrapper(type: Wrapper) {
	gradleVersion = "4.8"
}

static def isTestsProject(final Project p) {
	if(p == null) {
		return false
	} else if(p.name.contains("test")) {
		return true
	} else {
		return isTestsProject(p.parent)
	}
}

task mergeLog4j2PluginsDat(dependsOn: compileJava) {
	doLast {

		byte[] pluginsData
		byte[] customPluginsData

		configurations.provided
			.each {
				if(!it.isDirectory()) {
					zipTree(it)
						.filter {
							it.toString().endsWith(log4j2PluginsDatPath.toString())
						}
						.each {
							pluginsData = Files.readAllBytes(Paths.get(it.toString()))
						}
				}
			}

		sourceSets.main.output.classesDirs
			.any {
				customPluginsData = Files.readAllBytes(
					Paths.get(it.toString(), log4j2PluginsDatPath.toString(),)
				)
			}

		sourceSets.main.output.classesDirs
			.any {
				Files.write(
					Paths.get(it.toString(), log4j2PluginsDatPath.toString(),),
					pluginsData, StandardOpenOption.TRUNCATE_EXISTING
				)
				Files.write(
					Paths.get(it.toString(), log4j2PluginsDatPath.toString(),),
					customPluginsData, StandardOpenOption.APPEND
				)
			}
	}
}

task collectOptDeps(type: Copy) {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	excludes = [
		"**/*.css",
		"**/*.dll",
		"**/*.h",
		"**/*.html",
		"**/*.java",
		"**/pom.properties",
		"**/pom.xml",
		"aix/**",
		"darwin/**",
		"include/**",
		"jdk-module-paths/**",
		"kafka/**",
		"module-info.class",
		"schema/**",
		"win/**",
		"win32/**",
		"META-INF/*.DSA",
		"META-INF/*.RSA",
		"META-INF/*.SF",
		"META-INF/*.LIST",
		"META-INF/versions/**",
		"OSGI-OPT/**",
	]
	into optDepsDir
	configurations.moduleOpt.each {
		from zipTree(it.path)
	}
}

task mainJar(type: Jar, dependsOn: collectOptDeps) {

	dependsOn += compileJava
	dependsOn += mergeLog4j2PluginsDat

	baseName = rootProject.name
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE

	manifest {
		attributes(
			"Automatic-Module-Name": rootPkg,
			"Implementation-Title": rootProject.name,
			"Implementation-Version": version,
			"Main-Class": "com.emc.mongoose.Main",
		)
	}

	from compileJava.outputs.files

	from sourceSets.main.resources

	from configurations.provided.collect {
		it.isDirectory() ? it : zipTree(it)
	}

	excludes = [
		"**/*.html",
		"META-INF/*.DSA",
		"META-INF/*.LIST",
		"META-INF/*.RSA",
		"META-INF/*.SF",
		"module-info.class",
		"org/apache/commons/lang/enum/**",
	]

	leafProjects
		.each {
			final Project p = it
			from(p.jar.outputs.files) {
				into "${File.separator}ext"
				rename {
					fileName -> "${p.description}.jar"
				}
			}
		}
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = "javadoc"
	from javadoc.destinationDir
}

artifacts {
	archives mainJar
	archives sourcesJar
	archives javadocJar
}

assemble.dependsOn += mainJar

// Docker tasks ////////////////////////////////////////////////////////////////////////////////////////////////////////

import com.bmuschko.gradle.docker.tasks.image.*
import com.bmuschko.gradle.docker.tasks.container.*

task buildImage(type: DockerBuildImage, dependsOn: mainJar) {
	inputDir = rootProject.projectDir
	dockerFile = project.file("docker${File.separator}Dockerfile")
	imageId = "emcmongoose/mongoose"
	tags = [
		"emcmongoose/mongoose:${version}".toString(),
		"emcmongoose/mongoose:testing",
	]
}

task pushProductionImage(type: DockerPushImage, dependsOn: buildImage) {
	imageName = "emcmongoose/mongoose"
	tag = "emcmongoose/mongoose:${version}".toString()
}

task pushTestingImage(type: DockerPushImage, dependsOn: buildImage) {
	imageName = "emcmongoose/mongoose"
	tag = "emcmongoose/mongoose:${version}".toString()
}

task buildRobotestImage(type: DockerBuildImage) {
	inputDir = rootProject.projectDir
	dockerFile = project.file("docker${File.separator}Dockerfile.robotest")
	imageId = "emcmongoose/mongoose-robotest"
	tags = [
		"emcmongoose/mongoose-robotest:${version}",
	]
}

task createRobotestContainer(type: DockerCreateContainer, dependsOn: [buildImage, buildRobotestImage]) {
	attachStderr = true
	attachStdout = true
	autoRemove = true
	binds = [
		"${rootProject.buildDir}": "/root/mongoose/build",
		"/var/run/docker.sock": "/var/run/docker.sock",
	]
	envVars = [
		"HOST_WORKING_DIR": rootProject.projectDir.absolutePath,
		"MONGOOSE_VERSION": version,
		"MONGOOSE_IMAGE_VERSION": version,
		"SERVICE_HOST": "localhost",
		"SUITE": System.getenv("SUITE"),
		"TEST": System.getenv("TEST"),
	]
	imageId = buildRobotestImage.getImageId()
	network = "host"
	tty = true
	doLast {
		println "Created the container for the ${System.env.SUITE}.${System.env.TEST} test"
	}
}

task startRobotestContainer(type: DockerStartContainer, dependsOn: createRobotestContainer) {
	targetContainerId createRobotestContainer.getContainerId()
}

task robotest(type: DockerWaitContainer, dependsOn: startRobotestContainer) {
	targetContainerId createRobotestContainer.getContainerId()
	timeout = 600 // 10 min w/o output -> fail on Travis CI
	doLast {
		if(0 != exitCode) {
			throw new GradleException("Some robotests FAILED")
		} else {
			println "Robotests PASSED"
		}
	}
}

task genMainModuleInfo(type: Exec, dependsOn: mainJar) {
	executable = "${javaHome}${File.separator}bin${File.separator}jdeps"
	args = [
		"--module-path", "${javaHome}${File.separator}jmods",
		"--generate-module-info", "${rootProject.buildDir}",
		mainJar.outputs.files.iterator().next().path,
	]
}
